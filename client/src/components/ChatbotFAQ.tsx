import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

// Type pour les messages du chat
interface ChatMessage {
  id: string;
  sender: 'user' | 'bot';
  text: string;
  timestamp: Date;
}

// Type pour les suggestions rapides
interface QuickSuggestion {
  id: string;
  text: string;
  query: string;
}

// Base de connaissances du chatbot pour les FAQ
const faqData = {
  // Questions g√©n√©rales
  "installation": {
    question: "Comment se d√©roule l'installation d'une borne de recharge en copropri√©t√© ?",
    answer: "L'installation se d√©roule en plusieurs √©tapes : 1Ô∏è‚É£ √âtude technique gratuite de votre copropri√©t√©, 2Ô∏è‚É£ Proposition personnalis√©e, 3Ô∏è‚É£ Validation en assembl√©e g√©n√©rale, 4Ô∏è‚É£ Installation de l'infrastructure, 5Ô∏è‚É£ Pose des bornes individuelles. Notre √©quipe vous accompagne √† chaque √©tape pour une transition sans stress ! üîå‚ú®",
    followup: ["Combien de temps prend l'installation ?", "Quelles sont les aides financi√®res ?", "Dois-je contacter le syndic ?"]
  },
  "d√©lai": {
    question: "Quel est le d√©lai pour installer une borne en copropri√©t√© ?",
    answer: "Le d√©lai moyen est de 2 √† 3 mois, incluant l'√©tude technique (1-2 semaines), le vote en assembl√©e g√©n√©rale (d√©pend du calendrier de la copropri√©t√©), et l'installation (1-3 semaines selon la complexit√©). Nous pouvons acc√©l√©rer certaines phases si n√©cessaire pour les projets urgents ! ‚è±Ô∏èüí®",
    followup: ["Comment se passe l'√©tude technique ?", "Peut-on installer sans attendre l'assembl√©e g√©n√©rale ?"]
  },
  "prix": {
    question: "Combien co√ªte l'installation d'une borne de recharge ?",
    answer: "Le co√ªt varie selon la configuration de votre copropri√©t√©, mais bonne nouvelle : jusqu'√† 50% est pris en charge par les aides ADVENIR ! Pour une installation standard, comptez entre 1000‚Ç¨ et 2000‚Ç¨ par borne apr√®s d√©duction des aides. Nous vous proposons aussi des solutions de financement mensuel √† partir de 19,90‚Ç¨/mois. üí∞‚úÖ",
    followup: ["Quelles sont les aides disponibles ?", "Proposez-vous des financements ?"]
  },
  "aides": {
    question: "Quelles sont les aides financi√®res disponibles ?",
    answer: "Vous pouvez b√©n√©ficier de plusieurs aides : 1Ô∏è‚É£ Programme ADVENIR (jusqu'√† 50% du co√ªt), 2Ô∏è‚É£ Cr√©dit d'imp√¥t pour les particuliers (jusqu'√† 300‚Ç¨), 3Ô∏è‚É£ Aides locales variables selon les r√©gions et municipalit√©s. Notre √©quipe s'occupe de toutes les d√©marches administratives pour que vous obteniez le maximum d'aides possible ! üìùüí∂",
    followup: ["Comment obtenir ces aides ?", "Ces aides sont-elles cumulables ?"]
  },
  
  // Questions techniques
  "puissance": {
    question: "Quelle puissance de borne me faut-il ?",
    answer: "Tout d√©pend de votre v√©hicule et de vos besoins ! Pour un usage quotidien en copropri√©t√©, une borne de 7.4 kW est g√©n√©ralement id√©ale (recharge compl√®te en 4-8h). Si vous avez besoin de recharges plus rapides, nous proposons des bornes jusqu'√† 22 kW. Notre syst√®me de gestion intelligente optimise la distribution de puissance pour √©viter toute surcharge du r√©seau ! ‚ö°üîã",
    followup: ["Diff√©rence entre 7.4 kW et 22 kW ?", "Faut-il modifier le tableau √©lectrique ?"]
  },
  "type": {
    question: "Quels types de bornes proposez-vous ?",
    answer: "Nous proposons une gamme compl√®te adapt√©e √† tous les besoins : 1Ô∏è‚É£ Bornes murales (wallbox) compactes et √©conomiques, 2Ô∏è‚É£ Bornes sur pied pour les parkings ext√©rieurs, 3Ô∏è‚É£ Bornes intelligentes connect√©es pilotables √† distance. Toutes nos bornes sont compatibles avec tous les mod√®les de v√©hicules √©lectriques du march√© europ√©en ! üöóüîå",
    followup: ["Les bornes sont-elles compatibles avec ma voiture ?", "Peut-on recharger plusieurs v√©hicules ?"]
  },
  "maintenance": {
    question: "Comment fonctionne la maintenance des bornes ?",
    answer: "Nos contrats incluent une maintenance compl√®te : 1Ô∏è‚É£ Supervision √† distance 24/7, 2Ô∏è‚É£ Intervention sous 48h en cas de panne, 3Ô∏è‚É£ Mise √† jour logicielle automatique. La dur√©e de vie moyenne d'une borne est de 10 ans, et nos garanties couvrent pi√®ces et main d'≈ìuvre pendant 2 √† 5 ans selon les mod√®les. Vous pouvez dormir tranquille ! üîßüõ°Ô∏è",
    followup: ["Que faire en cas de panne ?", "Combien co√ªte la maintenance ?"]
  },
  
  // Questions process
  "syndic": {
    question: "Comment proc√©der avec mon syndic de copropri√©t√© ?",
    answer: "Pas d'inqui√©tude, nous nous occupons de tout ! Contactez-nous d'abord et nous : 1Ô∏è‚É£ Pr√©parons un dossier technique complet, 2Ô∏è‚É£ Communiquons directement avec votre syndic, 3Ô∏è‚É£ Pr√©sentons le projet en assembl√©e g√©n√©rale si n√©cessaire. Notre expertise en copropri√©t√© nous permet de simplifier toutes les d√©marches administratives ! üìã‚úÖ",
    followup: ["Le syndic peut-il refuser l'installation ?", "Faut-il un vote en assembl√©e g√©n√©rale ?"]
  },
  "droit": {
    question: "Ai-je le droit d'installer une borne dans ma copropri√©t√© ?",
    answer: "Absolument ! Depuis la loi d'orientation des mobilit√©s (LOM), vous b√©n√©ficiez d'un ¬´ droit √† la prise ¬ª : votre copropri√©t√© ne peut pas s'opposer √† l'installation d'une borne √† vos frais. Si vous rencontrez une r√©sistance, nous pouvons intervenir avec notre service juridique sp√©cialis√© pour faire valoir vos droits. La transition √©nerg√©tique est prot√©g√©e par la loi ! ‚öñÔ∏èüîå",
    followup: ["Comment fonctionne le droit √† la prise ?", "Que faire si le syndic refuse ?"]
  },
  
  // Fallback
  "fallback": {
    answer: "Je n'ai pas toutes les informations sur ce sujet sp√©cifique, mais je serais ravi d'en discuter plus en d√©tail. Pourriez-vous me donner plus de pr√©cisions sur votre question ? Ou pr√©f√©rez-vous √™tre mis en relation avec l'un de nos experts ? ü§î",
    followup: ["Parler √† un expert", "Demander un devis", "Voir la FAQ compl√®te"]
  }
};

// Suggestions rapides pour d√©marrer la conversation
const initialSuggestions: QuickSuggestion[] = [
  { id: "s1", text: "Comment installer une borne ?", query: "installation" },
  { id: "s2", text: "Combien √ßa co√ªte ?", query: "prix" },
  { id: "s3", text: "Aides financi√®res", query: "aides" },
  { id: "s4", text: "D√©marches avec le syndic", query: "syndic" }
];

// Fonctions d'utilitaires
const generateId = () => Math.random().toString(36).substring(2, 9);

const getBotResponse = (query: string): { answer: string, followup?: string[] } => {
  // Convertir la requ√™te en minuscules pour une recherche insensible √† la casse
  const normalizedQuery = query.toLowerCase();
  
  // Rechercher des mots-cl√©s dans la requ√™te
  for (const [key, data] of Object.entries(faqData)) {
    if (normalizedQuery.includes(key) || (data as any).question?.toLowerCase().includes(normalizedQuery)) {
      return data as { answer: string, followup?: string[] };
    }
  }
  
  // R√©ponse par d√©faut si aucune correspondance n'est trouv√©e
  return faqData.fallback;
};

// Composant du chatbot
const ChatbotFAQ: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [suggestions, setSuggestions] = useState<QuickSuggestion[]>(initialSuggestions);
  const [typingIndicator, setTypingIndicator] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Effet pour faire d√©filer automatiquement vers le bas
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);
  
  // Ajouter un message de bienvenue au chargement du chatbot
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setTimeout(() => {
        setMessages([
          {
            id: generateId(),
            sender: 'bot',
            text: "Bonjour ! üëã Je suis Aicha, votre assistante virtuelle BorneFlix. Comment puis-je vous aider avec votre projet de recharge pour v√©hicule √©lectrique en copropri√©t√© ?",
            timestamp: new Date()
          }
        ]);
      }, 600);
    }
  }, [isOpen, messages.length]);
  
  // Fonction pour envoyer un message
  const handleSendMessage = (text: string, isQuickReply = false) => {
    if (!text.trim() && !isQuickReply) return;
    
    // Ajouter le message de l'utilisateur
    const userMessage: ChatMessage = {
      id: generateId(),
      sender: 'user',
      text: text,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    
    // Simuler la saisie du bot
    setTypingIndicator(true);
    
    // Traiter la r√©ponse du bot
    setTimeout(() => {
      const response = getBotResponse(text);
      
      // Ajouter le message du bot
      const botMessage: ChatMessage = {
        id: generateId(),
        sender: 'bot',
        text: response.answer,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, botMessage]);
      setTypingIndicator(false);
      
      // Mettre √† jour les suggestions de suivi
      if (response.followup) {
        setSuggestions(
          response.followup.map((text, index) => ({
            id: `f${index}`,
            text,
            query: text.toLowerCase()
          }))
        );
      } else {
        setSuggestions(initialSuggestions);
      }
    }, 1000 + Math.random() * 1000); // D√©lai al√©atoire pour simuler la saisie
  };
  
  // G√©rer la soumission du formulaire
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    handleSendMessage(inputValue);
  };
  
  // Ouvrir ou fermer le chatbot
  const toggleChat = () => {
    setIsOpen(!isOpen);
  };
  
  // G√©n√©rer un composant am√©lior√© pour un message individuel
  const renderMessage = (message: ChatMessage) => {
    const isBotMessage = message.sender === 'bot';
    
    return (
      <motion.div
        key={message.id}
        initial={{ opacity: 0, y: 20, scale: 0.95 }}
        animate={{ opacity: 1, y: 0, scale: 1 }}
        transition={{ duration: 0.3, type: "spring", stiffness: 300, damping: 20 }}
        className={`flex ${isBotMessage ? 'justify-start' : 'justify-end'} mb-4 items-end`}
      >
        {/* Avatar pour les messages du bot */}
        {isBotMessage && (
          <div className="w-8 h-8 rounded-full bg-[#003566] flex-shrink-0 mr-2 flex items-center justify-center">
            <span className="text-white text-xs font-bold">EB</span>
          </div>
        )}
        
        <motion.div 
          className={`max-w-[80%] rounded-lg p-4 shadow-sm ${
            isBotMessage 
              ? 'bg-white text-gray-800 border-l-4 border-l-[#8dc63f] rounded-bl-none' 
              : 'bg-gradient-to-r from-[#003566] to-[#00264d] text-white rounded-br-none'
          }`}
          whileHover={{ scale: 1.01 }}
        >
          <div className="whitespace-pre-wrap text-sm md:text-base leading-relaxed">{message.text}</div>
          <div 
            className={`text-xs mt-2 text-right flex items-center justify-end ${
              isBotMessage ? 'text-gray-400' : 'text-white/70'
            }`}
          >
            {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            {isBotMessage ? (
              <i className="fas fa-check-circle ml-1 text-[#8dc63f]"></i>
            ) : (
              <i className="fas fa-check ml-1"></i>
            )}
          </div>
        </motion.div>
        
        {/* Avatar pour les messages de l'utilisateur */}
        {!isBotMessage && (
          <div className="w-8 h-8 rounded-full bg-[#8dc63f] flex-shrink-0 ml-2 flex items-center justify-center">
            <i className="fas fa-user text-white text-xs"></i>
          </div>
        )}
      </motion.div>
    );
  };
  
  return (
    <>
      {/* Bouton flottant pour ouvrir le chatbot avec animation pulse pour attirer l'attention */}
      <motion.div
        className="fixed bottom-8 right-8 sm:bottom-6 sm:right-6 z-40"
        initial={{ scale: 1 }}
        animate={{ 
          scale: [1, 1.05, 1],
        }}
        transition={{ 
          duration: 2, 
          repeat: Infinity,
          repeatType: "reverse" 
        }}
      >
        <motion.button
          className={`w-16 h-16 rounded-full shadow-lg flex items-center justify-center transition-all duration-300 ${
            isOpen ? 'bg-red-500 hover:bg-red-600' : 'bg-[#8dc63f] hover:bg-[#75a630]'
          }`}
          onClick={toggleChat}
          whileHover={{ scale: 1.1, boxShadow: "0 0 15px rgba(141, 198, 63, 0.6)" }}
          whileTap={{ scale: 0.95 }}
        >
          <i className={`fas ${isOpen ? 'fa-times' : 'fa-comments'} text-white text-xl`}></i>
          
          {/* Badge qui indique un nouveau message */}
          {!isOpen && messages.length === 0 && (
            <motion.span 
              className="absolute -top-1 -right-1 w-6 h-6 bg-red-500 rounded-full text-white text-xs flex items-center justify-center"
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ type: "spring", stiffness: 500, damping: 20 }}
            >
              1
            </motion.span>
          )}
        </motion.button>
      </motion.div>
      
      {/* Interface du chatbot */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 50, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 50, scale: 0.9 }}
            transition={{ duration: 0.3 }}
            className="fixed bottom-24 right-4 sm:right-6 w-[90vw] max-w-md h-[500px] z-40 rounded-lg shadow-2xl overflow-hidden bg-gray-50 border border-gray-200"
          >
            {/* Ent√™te du chatbot am√©lior√© */}
            <div className="bg-gradient-to-r from-[#003566] to-[#002548] text-white p-4 flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-12 h-12 rounded-full bg-white/90 mr-3 flex items-center justify-center shadow-md overflow-hidden">
                  <img src="/images/logo-small.svg" alt="Logo BorneFlix" className="w-10 h-10" />
                </div>
                <div>
                  <h3 className="font-bold text-lg">Elia, votre assistante</h3>
                  <div className="flex items-center text-sm">
                    <span className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
                    <span className="text-green-200">En ligne et pr√™te √† vous aider</span>
                  </div>
                </div>
              </div>
              <motion.button 
                onClick={toggleChat} 
                className="w-8 h-8 rounded-full bg-white/10 hover:bg-white/20 flex items-center justify-center transition-colors duration-200"
                whileHover={{ rotate: 90 }}
                transition={{ duration: 0.2 }}
              >
                <i className="fas fa-times"></i>
              </motion.button>
            </div>
            
            {/* Corps du chatbot */}
            <div className="h-[calc(100%-130px)] overflow-y-auto p-4 bg-gray-100">
              {messages.map(renderMessage)}
              
              {typingIndicator && (
                <div className="flex justify-start mb-3">
                  <div className="bg-white text-gray-800 rounded-lg rounded-bl-none p-3 max-w-[80%]">
                    <div className="flex space-x-1">
                      <motion.div
                        className="w-2 h-2 rounded-full bg-gray-400"
                        animate={{ y: [0, -5, 0] }}
                        transition={{ duration: 0.6, repeat: Infinity, ease: "easeInOut" }}
                      />
                      <motion.div
                        className="w-2 h-2 rounded-full bg-gray-400"
                        animate={{ y: [0, -5, 0] }}
                        transition={{ duration: 0.6, repeat: Infinity, ease: "easeInOut", delay: 0.2 }}
                      />
                      <motion.div
                        className="w-2 h-2 rounded-full bg-gray-400"
                        animate={{ y: [0, -5, 0] }}
                        transition={{ duration: 0.6, repeat: Infinity, ease: "easeInOut", delay: 0.4 }}
                      />
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
            
            {/* Suggestions rapides am√©lior√©es */}
            {suggestions.length > 0 && (
              <div className="bg-gradient-to-r from-white to-gray-50 border-t border-gray-200 p-3 overflow-x-auto">
                <div className="flex space-x-3 pb-1">
                  {suggestions.map((suggestion, index) => (
                    <motion.button
                      key={suggestion.id}
                      onClick={() => handleSendMessage(suggestion.text, true)}
                      className="px-4 py-2 bg-white hover:bg-[#f0f9e8] rounded-lg text-sm border border-gray-200 shadow-sm transition-all duration-200 flex-shrink-0 text-[#003566]"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ 
                        duration: 0.3, 
                        delay: index * 0.1,
                        type: "spring",
                        stiffness: 400, 
                        damping: 15
                      }}
                      whileHover={{ 
                        scale: 1.05, 
                        borderColor: '#8dc63f',
                        boxShadow: '0 4px 12px rgba(141, 198, 63, 0.15)'
                      }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="flex items-center">
                        <i className="fas fa-lightbulb text-[#8dc63f] mr-2"></i>
                        <span>{suggestion.text}</span>
                      </div>
                    </motion.button>
                  ))}
                </div>
              </div>
            )}
            
            {/* Zone de saisie am√©lior√©e avec animations et meilleure interface */}
            <form onSubmit={handleSubmit} className="bg-white border-t border-gray-200 p-4 flex items-center space-x-2">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="Posez votre question sur les bornes de recharge..."
                  className="w-full px-4 py-3 bg-gray-50 rounded-full focus:outline-none focus:ring-2 focus:ring-[#8dc63f] border border-gray-200 pr-10 transition-all duration-300 shadow-sm hover:shadow"
                  autoFocus={isOpen}
                />
                {inputValue && (
                  <button
                    type="button"
                    onClick={() => setInputValue('')}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
                  >
                    <i className="fas fa-times-circle"></i>
                  </button>
                )}
              </div>
              
              <motion.button
                type="submit"
                disabled={!inputValue.trim()}
                className={`w-12 h-12 rounded-full flex items-center justify-center transition-all duration-300 shadow-sm ${
                  inputValue.trim() 
                    ? 'bg-[#8dc63f] hover:bg-[#75a630] text-white cursor-pointer' 
                    : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                }`}
                whileHover={inputValue.trim() ? { scale: 1.05, rotate: 5 } : {}}
                whileTap={inputValue.trim() ? { scale: 0.95 } : {}}
              >
                <i className="fas fa-paper-plane"></i>
              </motion.button>
            </form>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default ChatbotFAQ;